package stun

import (
	"reflect"
	"testing"
)

func TestPacketDecoding(t *testing.T) {
	for _, test := range decodecheck {
		packet, err := ParsePacket(test.Raw)
		if test.Error != nil {
			if err == nil {
				t.Log("On", test.Raw)
				t.Error("Expected error", test.Error, " got success")
			} else if test.Error.Error() != err.Error() {
				t.Log("On", test.Raw)
				t.Error("Wrong error. Got", err, "but expected", test.Error)
			}
		} else {
			if packet == nil {
				t.Log("On", test.Raw)
				t.Error("Didn't get packet, expected", *test.Packet, ". Got error", err)
			} else if !reflect.DeepEqual(test.Packet, packet) {
				t.Log("On", test.Raw)
				t.Error("Got packet", packet, "but expected", test.Packet)
			}
		}
	}
}

type DecodeCheck struct {
	Raw    []byte
	Packet *Packet
}

var realPackets = []DecodeCheck{
	DecodeCheck{
		Raw: []byte{
			0x1, 0x1, 0x0, 0x24, 0x21, 0x12, 0xa4, 0x42,
			0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
			0xa, 0xb, 0xc, 0x0, 0x1, 0x0, 0x8, 0x0, 0x1,
			0x10, 0x92, 0xad, 0xa4, 0xde, 0x59, 0x0, 0x20,
			0x0, 0x8, 0x0, 0x1, 0x31, 0x80, 0x8c, 0xb6,
			0x7a, 0x1b, 0x80, 0x2b, 0x0, 0x8, 0x0, 0x1,
			0xd, 0x96, 0x42, 0xe4, 0x2d, 0x6e,
		},
		Packet: &Packet{
			Class:  ClassSuccess,
			Method: MethodBinding,
			Addr:   &net.UDPAddr{net.IPv4(173, 164, 222, 89), 4242},
		},
	},

	DecodeCheck{
		Raw: []byte{
			0x1, 0x1, 0x0, 0x24, 0x21, 0x12, 0xa4,
			0x42, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
			0x8, 0x9, 0xa, 0xb, 0xc, 0x0, 0x1, 0x0,
			0x8, 0x0, 0x1, 0x10, 0x92, 0xad, 0xa4,
			0xde, 0x59, 0x0, 0x20, 0x0, 0x8, 0x0, 0x1,
			0x31, 0x80, 0x8c, 0xb6, 0x7a, 0x1b, 0x80,
			0x2b, 0x0, 0x8, 0x0, 0x1, 0xd, 0x96, 0x42,
			0xe4, 0x2d, 0x6e,
		},
		Packet: &Packet{
			Class:  ClassSuccess,
			Method: MethodBinding,
			Addr:   &net.UDPAddr{net.IPv4(173, 164, 222, 89), 4242},
		},
	},

	DecodeCheck{
		Raw: []byte{
			0x1, 0x1, 0x0, 0x24, 0x21, 0x12, 0xa4, 0x42,
			0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
			0xa, 0xb, 0xc, 0x0, 0x1, 0x0, 0x8, 0x0, 0x1,
			0x10, 0x92, 0xad, 0xa4, 0xde, 0x59, 0x0, 0x4,
			0x0, 0x8, 0x0, 0x1, 0xd, 0x96, 0x4d, 0x48, 0xa9,
			0xa2, 0x0, 0x5, 0x0, 0x8, 0x0, 0x1, 0xd, 0x97,
			0x4d, 0x48, 0xa9, 0xa3,
		},
		Packet: &Packet{
			Class:  ClassSuccess,
			Method: MethodBinding,
			Addr:   &net.UDPAddr{net.IPv4(173, 164, 222, 89), 4242},
		},
	},
}

// []byte{0x1, 0x1, 0x0, 0x18, 0x21, 0x12, 0xa4, 0x42, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0x0, 0x1, 0x0, 0x8, 0x0, 0x1, 0x10, 0x92, 0xad, 0xa4, 0xde, 0x59, 0x0, 0x4, 0x0, 0x8, 0x0, 0x1, 0x4b, 0x66, 0x4a, 0x7d, 0x7f, 0x7e}
// []byte{0x1, 0x1, 0x0, 0x44, 0x21, 0x12, 0xa4, 0x42, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0x0, 0x1, 0x0, 0x8, 0x0, 0x1, 0x10, 0x92, 0xad, 0xa4, 0xde, 0x59, 0x0, 0x4, 0x0, 0x8, 0x0, 0x1, 0xd, 0x96, 0xd8, 0x5d, 0xf6, 0xe, 0x0, 0x5, 0x0, 0x8, 0x0, 0x1, 0xd, 0x97, 0xd8, 0x5d, 0xf6, 0xf, 0x80, 0x20, 0x0, 0x8, 0x0, 0x1, 0x31, 0x80, 0x8c, 0xb6, 0x7a, 0x1b, 0x80, 0x22, 0x0, 0x10, 0x56, 0x6f, 0x76, 0x69, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x20, 0x30, 0x2e, 0x39, 0x36, 0x0}
// []byte{0x1, 0x1, 0x0, 0x44, 0x21, 0x12, 0xa4, 0x42, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0x0, 0x1, 0x0, 0x8, 0x0, 0x1, 0x10, 0x92, 0xad, 0xa4, 0xde, 0x59, 0x0, 0x4, 0x0, 0x8, 0x0, 0x1, 0xd, 0x96, 0x84, 0xb1, 0x7b, 0xd, 0x0, 0x5, 0x0, 0x8, 0x0, 0x1, 0xd, 0x97, 0x84, 0xb1, 0x7b, 0xe, 0x80, 0x20, 0x0, 0x8, 0x0, 0x1, 0x31, 0x80, 0x8c, 0xb6, 0x7a, 0x1b, 0x80, 0x22, 0x0, 0x10, 0x56, 0x6f, 0x76, 0x69, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x20, 0x30, 0x2e, 0x39, 0x36, 0x0}
